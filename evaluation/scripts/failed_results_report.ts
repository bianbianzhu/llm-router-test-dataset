import { readdir, readFile } from "fs/promises";
import { intentClassificationOutputSchema } from "../../src/intent_classifier/schema.js";
import { intentClassifierEvaluation } from "./eval.js";
import { FILE_PATHS } from "../../src/constants/index.js";
import { z } from "zod";

export async function generateFailedResultsReport() {
  const { results } = await intentClassifierEvaluation({
    datasetName: "intent_classification_experiment",
  });

  // results: ExperimentResultRow[]
  // result.evaluationResults: EvaluationResults
  // result.evaluationResults.results: EvaluationResult[]
  // result.evaluationResults.results[0].score: boolean
  const failedResults = results.filter(
    (result) => !result.evaluationResults.results[0].score
  );

  const cleanedResults = [];
  for (let index = 0; index < failedResults.length; index++) {
    const result = failedResults[index];
    // example
    // {
    //   "inputs": { "input": "What is the weather in Tokyo?" },
    //   "outputs": { "intent": "weather" }
    // }
    // run:
    // { "outputs": { "outputs": "weather" } }
    const input = result.example.inputs.input;
    const expectedOutput = result.example.outputs?.intent;
    const generatedOutput = result.run.outputs?.outputs;

    // validate the output with the schema
    const schema = intentClassificationOutputSchema.shape.intent;
    const validatedExpectedOutput = schema.parse(expectedOutput);
    const validatedGeneratedOutput = schema.parse(generatedOutput);

    const intentDefinition = await loadIntentDefinition(
      validatedExpectedOutput
    );

    cleanedResults.push({
      description: `### Run ${index + 1}
Input: ${input}
Expected Output: ${expectedOutput}
Generated Output: ${generatedOutput}`,
      expectedOutput: validatedExpectedOutput,
      generatedOutput: validatedGeneratedOutput,
      input,
      intentDefinition,
    });
  }

  let report = "No failed runs";

  if (cleanedResults.length > 0) {
    report = `## Failed Runs
The following runs failed the intent classification evaluation. The expected output is the expected intent of the user query, and the generated output is the intent generated by the model:
${cleanedResults.map((result) => result.description).join("\n\n")}`;
  }

  return {
    report,
    cleanedResults,
  };
}

async function loadIntentDefinition(
  intent: z.infer<typeof intentClassificationOutputSchema.shape.intent>
): Promise<string> {
  try {
    // lowercase intent and replace space with underscore
    const intentLowercase = intent.toLowerCase().replace(/ /g, "_").trim();

    const intentFiles = await readdir(FILE_PATHS.INTENTS_DIR);

    const selectedFiles = intentFiles.filter(
      (file) =>
        file.endsWith(".md") &&
        !file.endsWith(FILE_PATHS.LOOSE_INTENTS_IDENTIFIER) &&
        file.includes(intentLowercase)
    );

    if (selectedFiles.length !== 1) {
      throw new Error(
        "Only one intent definition file should be found for the intent"
      );
    }

    const content = await readFile(
      `${FILE_PATHS.INTENTS_DIR}/${selectedFiles[0]}`,
      "utf-8"
    );

    return content;
  } catch (error) {
    console.error(error);
    throw error;
  }
}
